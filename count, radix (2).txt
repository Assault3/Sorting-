#include <iostream>
#include <vector>
#include <chrono>
using namespace std;
using namespace chrono;


class Sotr
{
	void CountSortForRadixSort(vector<int>& v, int p)
	{
		vector<int> freq(10, 0);
		vector<int> temp = v;

		for (int x : v)
			freq[x / p % 10]++;

		for (int i = 1; i < 10; i++)
			freq[i] += freq[i - 1];

		for(int x : temp)
			v[--freq[x / p % 10]] = x;
	}

public:

	void CountSort(vector<int>& v)
	{
		int max = v[0];
		for (int x : v)
		{
			if (max < x)
				max = x;
		}
		int n = max + 1;
		vector<int> freq(n, 0);

		for (int x : v)
			freq[x]++;

		for (int i = 1; i < n; i++)
		{
			freq[i] += freq[i - 1];
		}

		vector<int> temp = v;
		for(int x: temp)
			v[--freq[x]] = x;
	}


	void RadixSort(vector<int>& v)
	{
		int max = v[0];
		for (int x : v)
		{
			if (max < x)
				max = x;
		}

		for (int i = 1; max / i > 0; i *= 10)
			CountSortForRadixSort(v, i);
	}

};

int main()
{
	vector<int> v = { 2,5,3,0,2,3,0,3,4,5 };
	for (int x : v)
		cout << x << " ";
	Sotr s;
	auto startc = high_resolution_clock::now();
	s.CountSort(v);
	auto endc = high_resolution_clock::now();
	cout << "\nCount Sort: " << duration_cast<nanoseconds>(endc - startc).count() << "\n";
	for (int x : v)
		cout << x << " ";
	cout << endl;

	vector<int> a = {23, 12, 455, 299, 1002, 112, 75, 505, 404, 7};
	for (int x : a)
		cout << x << " ";
	auto startr = high_resolution_clock::now();
	s.RadixSort(a);
	auto endr = high_resolution_clock::now();
	cout << "\nRadix Sort: " << duration_cast<nanoseconds>(endr - startr).count() << "\n";
	for (int x : a)
		cout << x << " ";
	return 0;
}


